Git et Github


I) Qu’est-ce que versionner son code ?

Git est un logiciel qui permet de versionner votre code, c'est-à-dire gérer les versions de votre code au fur et à mesure que vous le modifiez.

Un commit correspond à une version de votre projet à un instant t. (c’est une modification accompagné d’un message).


II) Comparez Git aux autres solutions de versioning

Il existe plusieurs type de logiciel de gestion de version.
Modèle centralisé : un serveur central contrôle toute la base de code du logiciel.Ex: SVN, ou CVS
Modèle distribué : toutes les machines ont accès à la base de code, pas besoin de passer par un serveur central. Ex: Git, Mercurial, Bazaar.

Avantages du modèle distribué:

ne nécessite pas internet 

moins de risque de perdre son code (car accessible par toutes les machines)

Git possède une grande communauté


III) Installer Git

Sur windows :http://msysgit.github.io 
Sous linux, tapper la commande suivante dans le terminal : sudo apt install git
Exécutez la commande suivante pour définir votre nom et l’email que vous utiliserez ensuite pour créer un compte gratuit sur Github:
git config --global user.name ""
git config --global user.email ""

Pour vérifier l’installation tapper « git » dans le terminal, les commandes d’utilisation devraient s’afficher


IV) Faites votre premier commit

Créer d’abord un repository git (c'est-à-dire un répertoire de travail qui pourra être géré par Git !)
Pour activer un dossier comme repository Git, il suffit de se placer dans ce dossier avec le Terminal puis d'utiliser la commande git init. 
On peut ensuite commencer à créer notre projet à l’intérieur de notre repository git (des fichiers)
Il faut ensuite que les fichiers crées soient trackés (suivis, gardé en mémoire) par git (on dit aussi qu’ils sont ajoutés à l’index)
Pour cela on utilise la commande git add NomDuFichier (par exemple git add fichier.txt)
On fait enfin un commit avec un message pour dire que l’on vient d’ajouté le fichier fichier.txt : git commit -m « le fichier fichier.txt vient d’être ajouté »

Pour résumer :
1) Créer un repository git : se placer à l’aide du terminal sur le dossier concerné et tapper git init
2) Créer ses fichiers, à l’intérieur du repository
3) Indexer ses fichiers à Git : git add NomDuFichier
4) Faire son 1er commit (version) avec un message descriptif de ce que l’on vient de faire : git commit -m « Mon Commentaire »


V) Lire l’historique

git log : affiche la liste de tous les commits que vous avez réalisés (du + au récent au + vieux) on retrouve le SHA, la date, l’auteur et le message de description du commit.
Astuce : si vous modifier un fichier qui est déjà ajouté à l’index, vous n’êtes pas obligé de retaper la commande git add. On peut fusionner la commande git add et git commit par git commit -a -m « Mon commentaire » ou git commit -am « Mon commentaire »

VI) Positionnez-vous sur un commit donné

Pour se positionner sur un commit donné : git checkout SHADuCommit ex : git checkout 86cb783221c7841187

Pour revenir à votre branche principale (au commit le plus récent)
git checkout master

Pour modifier le message du commit le plus récent : git commit --amend -m « Votre message »

Pour " revert" un commit, c'est-à-dire créer un nouveau commit qui fait l'inverse du précédent :
git revert SHADuCommit Par Exemple si vous avez fait un commit pour créer un fichier, faire un revert supprimera le fichier. Si vous avez fait un commit où vous aviez crée 3 ligne de code, les 3 lignes seront supprimées…

Pour annuler tous les changements qui n’ont pas encore été commités : git reset --hard

VII) Les remotes

Un remote est une autre machine qui peut être:
interne (si vous avez la chance d'avoir plusieurs ordinateurs )
externe (grâce à des services comme GitHub ou BitBucket)

Une fois que vous avez travaillé sur votre code et effectué vos commits, vous allez donc les envoyer sur un remote. Cela permet d’avoir une sauvegarde de vos commits en cas de problème (disque dur en panne, vol d’ordinateur…)

VIII) GitHub

GitHub est un service en ligne qui permet d'héberger ses repositories de code
Vous allez pouvoir notamment : 
Communiquer avec d'autres développeurs et signaler des problèmes de code en déclarant des "issues" ;
Partager des morceaux de code en ligne à l'aide de "gists" 
Proposer des modifications de code à d'autres repos en faisant des "pull requests" ;
récupérer du code depuis un autre repository

IX) Récupérez du code d'un autre repository sur Github

À partir de GitHub, vous pouvez copier un repository sur votre machine. Pour cela, il vous suffit de rechercher le repository qui vous intéresse sur GitHub, de vous y placer, puis d'utiliser l'option "clone or download" en bas à droite de l'écran.

On utilise ensuite dans notre terminal la commande :git clone lienFourniParGitHub 

Ici dans notre exemple : git clone https://github.com/facebook/react.git

L’intégralité du repository est copié en local dans le dossier sélectionné

Remarque : on peut utiliser l’option HTTPS ou SHS pour cloner son repository.

HTTPS est plus simple mais demande de fournir vos identifiants GitHub à chaque fois que vous faites un git clone. 
L'option SSH est plus pratique car elle ne vous demande pas vos identifiants à chaque fois. Par contre, pour l'utiliser, il faut générer une clé SSH, ce qui est un peu plus compliqué

X) Créez votre premier repository Github

En cliquant sur + en haut à droite et « New repository »
GitHub vous demandera alors de préciser quelques détails sur votre repository: son nom, sa description, son statut public ou privé… 

"Initialise with a README", est à cocher uniquement dans le cas où vous n'avez pas encore créé le repository en question sur votre machine en local

Vous n’avez plus qu’à utiliser la commande git clone pour copier ce repository en local sur votre machine

XI) Envoyer son code local sur Github

Il faut déjà avoir crée un repository Github et l’avoir cloné en local 

git push origin master

XII) Récupérer en local les modifications du repo Github

Il faut déjà avoir crée un repository Github et l’avoir cloné en local
git pull origin master

On aurait pu faire un git clone mais cela récupère l’intégralité du projet, la manipulation est donc plus lente

Ces 2 commandes (git pull et push) permettent d’être le plus à jour possible dans un projet. Elles sont donc à faire régulièrement











